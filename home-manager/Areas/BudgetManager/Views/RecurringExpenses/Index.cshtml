@model home_manager.Areas.BudgetManager.ViewModels.RecurringCategoryFilterItems_VModel
@{
    ViewData["Title"] = "Recurring Items";
}

<style>
    .container {
        max-width: 95vw !important;
        margin: 0 auto;
        padding: 0 10px;
    }

    .card {
        width: 100%;
        margin: 0;
    }

    .card-body {
        padding: 1rem 0.5rem;
    }

    .table {
        margin: 0;
    }

        .table td, .table th {
            padding: 0.5rem 0.25rem;
        }

    #filter-container {
        display: flex;
        justify-content: space-between;
        align-items: end;
        width: auto;
    }
</style>

<div class="modal fade" id="ModifyModal" role="dialog" aria-hidden="True">
    <div class="modal-dialog modal-custom" role="document">
        <div class="modal-content" id="ModifyModalContent">
            <!-- Modal content will be injected here -->
        </div>
    </div>
</div>

<div class="container">
    <h2 class="mb-4">Recurring Expenses</h2>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group" id="filter-container">
                        <div class="col-md-3">
                            <label for="categoryFilter" class="form-label">Filter by Category</label>
                            <select id="categoryFilter" class="form-select" onchange="loadRecurringExpensesTable(this.value)">
                                <option value="0">All Categories</option>
                                @foreach (var category in Model.Items)
                                {
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                }
                            </select>
                        </div>
                        <div>
                            <button type="button" id="" class="btn btn-outline-danger" style="border: none; margin-right:8px;" onclick="editRecurringItem(this)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                                </svg>
                                <span class="visually-hidden">Button</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <input type="hidden" id="currentCategoryId" value="0" />
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Category</th>
                            <th class="text-end">Minimum Due</th>
                            <th class="text-end">Balance</th>
                            <th class="text-end">Interest Rate</th>
                            <th></th>
                            <th>Day</th>
                            <th>Jan</th>
                            <th>Feb</th>
                            <th>Mar</th>
                            <th>Apr</th>
                            <th>May</th>
                            <th>Jun</th>
                            <th>Jul</th>
                            <th>Aug</th>
                            <th>Sep</th>
                            <th>Oct</th>
                            <th>Nov</th>
                            <th>Dec</th>
                            <th>Paid Off</th>
                        </tr>
                    </thead>
                    <tbody id="_RecurringExpensesTable">
                        <!-- Recurring Expenses Table content will be injected here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize the table with all categories (categoryId = 0) when the page loads
        $(document).ready(function () {
            loadRecurringExpensesTable(0);
        });

        /**
         * Loads and updates the recurring expenses table based on selected category
         * param {number} categoryId - The ID of the category to filter by (0 for all categories)
         */
        function loadRecurringExpensesTable(categoryId) {
            // Store current category selection in hidden field for state management
            document.getElementById('currentCategoryId').value = categoryId;
            
            // Show loading indicator
            poster.on("Loading");
            
            // Request updated table content
            $.ajax({
                url: '@Url.Action("GetRecurringExpensesTable", "RecurringExpenses", new { area = "BudgetManager" })',
                type: 'POST',
                data: { categoryId: categoryId },
                headers: {
                    // Include anti-forgery token for security
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (data) {
                    // Update table content with returned partial view
                    $('#_RecurringExpensesTable').html(data);
                    // Initialize Bootstrap components and styling
                    initializeComponents();
                },
                error: function (xhr, status, error) {
                    // Log detailed error information for debugging
                    console.error('Error:', error);
                    console.log('Status:', status);
                    console.log('Response:', xhr.responseText);
                },
                complete: function() {
                    // Hide loading indicator regardless of success/failure
                    poster.off();
                }
            });
        }

        /**
         * Initializes Bootstrap components and applies styling to the table
         * Called after table content is loaded or updated
         */
        function initializeComponents() {
            try {
                // Initialize Bootstrap tooltips for any elements with data-bs-toggle="tooltip"
                const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
                const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

                // Apply success styling to cells containing checked checkboxes
                $('.table input[type="checkbox"]').each(function() {
                    const td = $(this).closest('td');
                    if ($(this).is(':checked')) {
                        td.addClass('table-success');
                    }
                });
            } catch (error) {
                console.error('Error in loadStyles:', error);
            }
        }

        /**
         * Event handler for edit button clicks
         * param {HTMLElement} recurring_item - The clicked element containing the item ID
         */
        function editRecurringItem(recurring_item) {
            // Extract item ID from the element
            const itemId = $(recurring_item).attr("id");
            loadModifyModal(itemId);
        }

        /**
         * Loads and displays the modal for editing a recurring item
         * param {number} itemId - The ID of the recurring item to edit
         */
        function loadModifyModal(itemId) {
            // Show loading indicator
            poster.on("Loading");
            
            // Request modal content
            $.ajax({
                url: '@Url.Action("LoadModifyModal", "RecurringExpenses", new { area = "BudgetManager" })',
                type: 'POST',
                data: { itemId: itemId },
                headers: {
                    // Include anti-forgery token for security
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    // Insert modal content and show the modal
                    $('#ModifyModalContent').html(response);
                    $('#ModifyModal').modal('show'); 
                },
                error: function (xhr, status, error) {
                    // Log detailed error information for debugging
                    console.error('Error:', error);
                    console.log('Status:', status);
                    console.log('Response:', xhr.responseText);
                },
                complete: function() {
                    // Hide loading indicator regardless of success/failure
                    poster.off();
                }
            });
        }
    </script>
}