@using home_manager.Helpers 
@{  
    ViewData["Title"] = "Incidental Expenses";  
}  
@model home_manager.Areas.BudgetManager.ViewModels.AvailableLedgerDropdown_VModel  

<style>
    /* Remove spinner controls from number inputs */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }

    .container {
        max-width: 95vw !important;
        margin: 0 auto;
        padding: 0 10px;
    }

    .card {
        width: 100%;
        margin: 0;
    }

    .card-body {
        padding: 1rem 0.5rem;
    }

    .table {
        margin: 0;
    }

        .table td, .table th {
            padding: 0.5rem 0.25rem;
        }

    #filter-container {  
        display: flex;  
        justify-content: start;  
        align-items: end;  
        width: auto;  
    }  
</style>  

<div class="container">  
    <h2 class="mb-4">Incidental Expenses</h2>  

    <div class="card">  
        <div class="card-body">
            <input type="hidden" id="edit-item" name="edit-item" value="0" />
            <div class="row">  
                <div class="col-md-12">  
                    <div class="form-group" id="filter-container">  
                        <div class="col-md-3">  
                            <label for="monthFilter" class="form-label">Month</label>  
                            <select id="monthFilter" class="form-select" onchange="resetPage()">
                                @foreach (var month in Model.LedgerMonths)
                                {
                                    if (Model.SelectedLedger.month == month)
                                    {
                                        <option value="@month" selected="selected">
                                            @(DropdownHelper.MonthDropdownOptions[month])
                                        </option>
                                    }
                                    else
                                    {
                                        <option value="@month">
                                            @(DropdownHelper.MonthDropdownOptions[month])
                                        </option>
                                    }
                                }  
                            </select>  
                        </div>  
                        <div class="col-md-3 ms-2">  
                            <label for="yearFilter" class="form-label">Year</label>  
                            <select id="yearFilter" class="form-select" onchange="resetPage()">
                                @foreach (var year in Model.LedgerYears)
                                {
                                    if (Model.SelectedLedger.year == year)
                                    {
                                        <option value="@year" selected="selected">
                                            @year
                                        </option>
                                    }
                                    else
                                    {
                                        <option value="@year">
                                            @year
                                        </option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3 ms-2">
                            <a href="javascript:void(0)" onclick="navigateToLedger()"><h6>Go to Ledger View</h6></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">  
        <div class="card-body">  
            <input type="hidden" id="currentMonthId" value="@DateTime.Now.Month" />
            <input type="hidden" id="currentYearId" value="@DateTime.Now.Year" />
            <div class="table-responsive">  
                <table class="table table-hover">  
                    <thead>  
                        <tr>  
                            <th width="1%"></th>
                            <th width="1%"></th>
                            <th class="text-center" width="1%">Paid</th>
                            <th>Date</th>
                            <th width="20%">Expense</th>
                            <th width="10%">Amount</th>
                            <th width="20%">Description (optional)</th>
                            <th>Transaction Type</th>
                            <th>Category</th>
                        </tr>  
                    </thead>  
                    <tbody id="_IncidentalExpensesTable">  
                        <!-- Incidentals Expenses Table content will be injected here -->  
                    </tbody>  
                </table>  
            </div>  
        </div>  
    </div>  
</div>  

@section Scripts {  
    <script>  

        $(document).ready(function () {  
            refreshIncidentalExpensesTable();
            
        });  

        function loadIncidentalExpensesTable() {  
            poster.on()

            const ledgerMonth = $('#monthFilter').val();
            const ledgerYear = $('#yearFilter').val();

            $.ajax({  
                url: '@Url.Action("GetIncidentalExpensesTable", "IncidentalExpenses", new { area = "BudgetManager" })',  
                type: 'POST',
                data: { month: ledgerMonth, year: ledgerYear, editableId: parseInt($('#edit-item').val()) },
                headers: {  
                    // Include anti-forgery token for security  
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()  
                },  
                success: function(data) {
                    $('#_IncidentalExpensesTable').html(data);
                },  
                error: function (xhr, status, error) {  
                    // Log detailed error information for debugging  
                    console.error('Error:', error);  
                    console.log('Status:', status);  
                    console.log('Response:', xhr.responseText);  
                },  
                complete: function() {  
                    // Hide loading indicator regardless of success/failure  
                    poster.off();  
                }  
            });  
        }

        function updateCategoryDropdown() {
            const transactionId = $('#transactionDropdown').val();
            const categoryDropdown = $('#categoryDropdown');

            categoryDropdown.prop('disabled', true);

            $.ajax({
                url: '@Url.Action("GetCategoriesByTransaction", "IncidentalExpenses", new { area = "BudgetManager" })',
                type: 'GET',
                data: { transactionId: transactionId},
                success: function(data) {
                    categoryDropdown.empty();

                    $.each(data, function(index, category) {
                        categoryDropdown.append(
                            $('<option></option>')
                                .val(category.id)
                                .text(category.description)
                        );
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error loading categories:', error);
                    categoryDropdown.html('<option value="">Error loading categories</option>');
                },
                complete: function() {
                    categoryDropdown.prop('disabled', false);
                }
            });
        }

        function saveItem(incidental_item) {  
            const amount = parseFloat($('#newAmount').val()) || 0;  
            const formattedAmount = $('#categoryDropdown').text().trim() !== "Receive" ? (Math.abs(amount) * -1) : Math.abs(amount);

            const itemId = $(incidental_item).attr("id").split('-')[1];

            // Get form data from the dynamic row  
            const incidentalItem = {
                Id: parseInt(itemId),
                Name: $('#newExpense').val()?.trim() ?? '',  
                Description: $('#newDescription').val()?.trim() ?? '',  
                Amount: formattedAmount,
                IsPaid: document.querySelector('[id="newPaid"]').checked,
                Date: $('#newDate').val(),  
                TransactionTypeId: parseInt($('#transactionDropdown').val()) || 0,  
                Category_catId: parseInt($('#categoryDropdown').val()) || 0  
            };

            // Get selected month and year from dropdowns above the table  
            const month = parseInt($('#monthFilter').val()) || 0;  
            const year = parseInt($('#yearFilter').val()) || 0;  

            if (!incidentalItem.Name) {  
                alert('Expense is required');  
                return;  
            }  
            if (incidentalItem.Amount === 0) {  
                alert('Amount is required');  
                return;  
            }  

            const payload = {  
                model: incidentalItem,  
                month: month,  
                year: year
            };  

            poster.on("Saving");  
            $.ajax({  
                url: '@Url.Action("UpdateIncidentalExpense", "IncidentalExpenses", new { area = "BudgetManager" })',  
                type: 'POST',  
                contentType: 'application/json',  
                data: JSON.stringify(payload),  
                headers: {  
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()  
                },  
                success: function(response) {  
                    if (response.success) {  
                        refreshIncidentalExpensesTable();  
                    }  
                },  
                error: function(xhr, status, error) {  
                    console.error('Error:', error);  
                    alert(xhr.responseText || 'Failed to save changes. Please try again.');  
                },  
                complete: function() {  
                    poster.off();  
                }  
            });  
        }

        function pad2(n) { return n < 10 ? '0' + n : n; }

        function setDateInputRange() {
            const month = parseInt($('#monthFilter').val());
            const year = parseInt($('#yearFilter').val());
            if (!month || !year) return;

            // First day of month
            const minDate = `${year}-${pad2(month)}-01`;
            // Last day of month
            const lastDay = new Date(year, month, 0).getDate();
            const maxDate = `${year}-${pad2(month)}-${pad2(lastDay)}`;

            $('#newDate').attr('min', minDate).attr('max', maxDate);

            // If current value is outside the range, reset to min
            const current = $('#newDate').val();
            if (current < minDate || current > maxDate) {
                $('#newDate').val(minDate);
            }
        }

        function deleteIncidentalItem(incidental_item) {
            const item = $(incidental_item).attr("id").split('-');
            const itemId = item[1];
            const itemName = item[2];
            poster.on();

            if(confirm(`Are you sure you want to delete ${itemName}?`)) {
                $.ajax({
                    url: '@Url.Action("DeleteIncidentalItem", "IncidentalExpenses", new { area = "BudgetManager" })',
                    type: 'POST',
                    data: { itemId: itemId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        refreshIncidentalExpensesTable();
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        console.log('Status:', status);
                        console.log('Response', response);
                    },
                    complete: function() {
                        poster.off();
                    }
                });
            } else {
                poster.off();
            }
        }

        function enableEditMode(itemId) {
            $('#edit-item').val(itemId);
            loadIncidentalExpensesTable();
        }

        function refreshIncidentalExpensesTable() {
            $('#edit-item').val('0');
            loadIncidentalExpensesTable();
        }

        function resetPage() {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            // Construct the URL. Replace "YourControllerName" with the actual controller name.
            var url = '@Url.Action("Index", "IncidentalExpenses", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;

            window.location.href = url;
        }

        function navigateToLedger() {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            // Construct the URL. Replace "YourControllerName" with the actual controller name.
            var url = '@Url.Action("Index", "Ledger", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;

            window.location.href = url;
        }

        // function lockDynamicRow() {
        //     $('#_IncidentalExpensesDynamicRow').find('button, input, select').prop('disabled', true);
        // }
    </script>  
}
