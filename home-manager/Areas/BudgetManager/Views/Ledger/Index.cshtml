@using home_manager.Helpers
@{
    ViewData["Title"] = "Ledger";
}
@model home_manager.Areas.BudgetManager.ViewModels.AvailableLedgerDropdown_VModel;

@{
    string styleHide = "";
    if (Model.hideRunningBalance) {
        styleHide = "display: none !important;";
    }
}

<!-- modal -->
<div class="modal fade" id="LedgerItemModal" role="dialog" aria-hidden="True">
    <div class="modal-dialog modal-custom" role="document">
        <div class="modal-content" id="LedgerItemModalContent">
            <!-- Modal content will be injected here -->
        </div>
    </div>
</div>

<div class="container">
    <h2 class="mb-4">Ledger</h2>

    <div class="card">
        <div class="card-body">
            <input type="hidden" id="edit-item" name="edit-item" value="0" />
            <div class="ledger-filter-bar">
                <div class="ledger-filter-dropdowns">
                    <div>
                        <label for="monthFilter" class="form-label">Month</label>
                        <select id="monthFilter" class="form-select" onchange="resetPage()">
                            @foreach (var month in Model.LedgerMonths)
                            {
                                if (Model.SelectedLedger.month == month)
                                {
                                    <option value="@month" selected="selected">
                                        @(DropdownHelper.MonthDropdownOptions[month])
                                    </option>
                                }
                                else
                                {
                                    <option value="@month">
                                        @(DropdownHelper.MonthDropdownOptions[month])
                                    </option>
                                }
                            }
                        </select>
                    </div>
                    <div>
                        <label for="yearFilter" class="form-label">Year</label>
                        <select id="yearFilter" class="form-select" onchange="resetPage()">
                            @foreach (var year in Model.LedgerYears)
                            {
                                if (Model.SelectedLedger.year == year)
                                {
                                    <option value="@year" selected="selected">
                                        @year
                                    </option>
                                }
                                else
                                {
                                    <option value="@year">
                                        @year
                                    </option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <button type="button" id="add-ledger-btn" class="btn btn-outline-primary" onclick="createNewLedger()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-plus-square" viewBox="0 0 16 16">
                        <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                    </svg>
                    <span class="visually-hidden">Create New Ledger Button</span>
                </button>
                @* <div class="col-md-3 ms-2">
                    <a href="javascript:void(0)" onclick="createNewLedger()"><h6>Create Next Ledger</h6></a>
                </div> *@
            </div>
        </div>
    </div>

    <div class="card" id="_BalanceDetailCard">
        <!-- BalanceDetailCard content will be injected here -->
    </div>

    <div class="card">
        <div class="card-body">
            <input type="hidden" id="currentMonthId" value="@TimeZoneHelper.LocalTime.Month" />
            <input type="hidden" id="currentYearId" value="@TimeZoneHelper.LocalTime.Year" />
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th class="hide-cells-on-small-display" width="1%"></th>
                            <th>Expense</th>
                            <th class="hide-cells-on-small-display">Description</th>
                            <th>Date</th>
                            <th>Paid</th>
                            <th>Checking Amount</th>
                            <th style="@styleHide">Checking Balance</th>
                            <th>Savings Amount</th>
                            <th style="@styleHide">Savings Balance</th>
                        </tr>
                    </thead>
                    <tbody id="_LedgerTable">
                        <!-- Ledger Table content will be injected here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            loadLedgerTable();
        });

        function loadBalanceDetailCard() {

            $.ajax({
                url: '@Url.Action("GetBalanceDetailCard", "Ledger", new { area = "BudgetManager" })',
                type: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(data) {
                    $('#_BalanceDetailCard').html(data);
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    console.log('Status:', status);
                    console.log('Response:', xhr.responseText);
                }
            });
        }

        function loadLedgerTable() {
            poster.on();

            loadBalanceDetailCard();

            const ledgerMonth = $('#monthFilter').val();
            const ledgerYear = $('#yearFilter').val();


            $.ajax({
                url: '@Url.Action("GetLedgerTable", "Ledger", new { area = "BudgetManager" })',
                type: 'POST',
                data: { month: ledgerMonth, year: ledgerYear, editableId: parseInt($('#edit-item').val()) },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(data) {
                    $('#_LedgerTable').html(data);
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    console.log('Status:', status);
                    console.log('Response:', xhr.responseText);
                },
                complete: function() {
                    poster.off();
                }
            });
        }

        function enableEditMode(itemId) {
            $('#edit-item').val(itemId);
            loadLedgerTable();
        }

        function refreshLedgerTable() {
            $('#edit-item').val('0');
            loadLedgerTable();
        }

        function pad2(n) { return n < 10 ? '0' + n : n; }

        function setDateInputRange() {
            const month = parseInt($('#monthFilter').val());
            const year = parseInt($('#yearFilter').val());
            if (!month || !year) return;

            // First day of month
            const minDate = `${year}-${pad2(month)}-01`;
            // Last day of month
            const lastDay = new Date(year, month, 0).getDate();
            const maxDate = `${year}-${pad2(month)}-${pad2(lastDay)}`;

            $('#newDate').attr('min', minDate).attr('max', maxDate);

            // If current value is outside the range, reset to min
            const current = $('#newDate').val();
            if (current < minDate || current > maxDate) {
                $('#newDate').val(minDate);
            }
        }

        function saveItem(ledger_item) {
            const amount = parseFloat($('#newAmount').val()) || 0;
            const formattedAmount = (Math.abs(amount) * -1);

            const itemId = $(ledger_item).attr("id").split('-')[1];

            const month = parseInt($('#monthFilter').val()) || 0;
            const year = parseInt($('#yearFilter').val()) || 0;

            // Get form data from the dynamic row
            const payload = {
                id: parseInt(itemId),
                amount: formattedAmount,
                isPaid: document.querySelector('[id="newPaid"]').checked,
                date: $('#newDate').val()
            };
            
            if (payload.Amount === 0) {
                alert('Amount is required');
                return;
            }


            poster.on("Saving");
            $.ajax({
                url: '@Url.Action("UpdateLedgerItem", "Ledger", new { area = "BudgetManager" })',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    $('#LedgerItemModal').modal('hide');
                    if (response.success) {
                        refreshLedgerTable();
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    alert(xhr.responseText || 'Failed to save changes. Please try again.');
                },
                complete: function() {
                    poster.off();
                }
            });
        }

        function resetPage() {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            var url = '@Url.Action("Index", "Ledger", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;

            window.location.href = url;
        }

        function navigateToOther(name) {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            let url;

            switch (name) {
                case "Incidentals":
                    url = '@Url.Action("Index", "IncidentalExpenses", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;
                    break;
                case "Payday":
                    url = '@Url.Action("Index", "Income", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;
                    break;
                default:
                    url = '@Url.Action("Index", "Savings", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;
            }

            window.location.href = url;
        }

        function navigateToIncome() {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            var url = '@Url.Action("Index", "Income", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;

            window.location.href = url;
        }

        function navigateToSavings() {
            var month = document.getElementById("monthFilter").value;
            var year = document.getElementById("yearFilter").value;

            var url = '@Url.Action("Index", "Savings", new { area = "BudgetManager" })' + "?month=" + month + "&year=" + year;

            window.location.href = url;
        }

        function createNewLedger() {
            poster.on("Saving");

            if(confirm("Create a new Ledger?")) {
                $.ajax({
                    url: '@Url.Action("CreateNewLedger", "Ledger", new { area = "BudgetManager" })',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            console.log(response.month, response.year);
                            // window.location.href = response.redirectUrl;
                            var url = '@Url.Action("Index", "Ledger", new { area = "BudgetManager" })' + "?month=" + response.month + "&year=" + response.year;

                            window.location.href = url;
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', error);
                        alert(xhr.responseText || 'Failed to save changes. Please try again.');
                    },
                    complete: function() {
                        poster.off();
                    }
                });
            } else {
                poster.off();
            }
        }

        function loadLedgerItemModal(itemId) {
            if(window.matchMedia("(max-width: 750px)").matches) {
                console.log("test", itemId);

                poster.on("Loading");

                // Request modal content
                $.ajax({
                    url: '@Url.Action("LoadLedgerItemModal", "Ledger", new { area = "BudgetManager" })',
                    type: 'POST',
                    data: { itemId: itemId },
                    headers: {
                        // Include anti-forgery token for security
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        // Insert modal content and show the modal
                        $('#LedgerItemModalContent').html(response);
                        $('#LedgerItemModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        // Log detailed error information for debugging
                        console.error('Error:', error);
                        console.log('Status:', status);
                        console.log('Response:', xhr.responseText);
                    },
                    complete: function() {
                        // Hide loading indicator regardless of success/failure
                        poster.off();
                    }
                });
            }
        }
    </script>
}