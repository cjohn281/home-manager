@using home_manager.Helpers 
@{  
    ViewData["Title"] = "Incidental Expenses";  
}  
@model home_manager.Areas.BudgetManager.ViewModels.AvailableLedgerDropdown_VModel  

<style>
    /* Remove spinner controls from number inputs */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type="number"] {
        -moz-appearance: textfield;
    }

    .container {
        max-width: 95vw !important;
        margin: 0 auto;
        padding: 0 10px;
    }

    .card {
        width: 100%;
        margin: 0;
    }

    .card-body {
        padding: 1rem 0.5rem;
    }

    .table {
        margin: 0;
    }

        .table td, .table th {
            padding: 0.5rem 0.25rem;
        }

    #filter-container {  
        display: flex;  
        justify-content: start;  
        align-items: end;  
        width: auto;  
    }  
</style>  

<div class="container">  
    <h2 class="mb-4">Incidental Expenses</h2>  

    <div class="card">  
        <div class="card-body">  
            <div class="row">  
                <div class="col-md-12">  
                    <div class="form-group" id="filter-container">  
                        <div class="col-md-3">  
                            <label for="monthFilter" class="form-label">Month</label>  
                            <select id="monthFilter" class="form-select" onchange="loadIncidentalExpensesTable()">
                                @foreach (var month in Model.LedgerMonths) {  
                                    <option value="@month"
                                            selected="@Model.LatestAvailableLedger.month">@(DropdownHelper.MonthDropdownOptions[month])</option>
                                }  
                            </select>  
                        </div>  
                        <div class="col-md-3 ms-2">  
                            <label for="yearFilter" class="form-label">Year</label>  
                            <select id="yearFilter" class="form-select" onchange="loadIncidentalExpensesTable()">
                                @foreach (var year in Model.LedgerYears)
                                {
                                    <option value="@year"
                                        selected="@Model.LatestAvailableLedger.year">@year</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">  
        <div class="card-body">  
            <input type="hidden" id="currentMonthId" value="@DateTime.Now.Month" />
            <input type="hidden" id="currentYearId" value="@DateTime.Now.Year" />
            <div class="table-responsive">  
                <table class="table table-hover">  
                    <thead>  
                        <tr>  
                            <th width="1%"></th>
                            <th width="1%"></th>
                            <th>Date</th>
                            <th width="20%">Expense</th>
                            <th width="10%">Amount</th>
                            <th width="20%">Description (optional)</th>
                            <th>Transaction Type</th>
                            <th>Category</th>
                        </tr>  
                    </thead>  
                    <tbody id="_IncidentalExpensesTable">  
                        <!-- Incidentals Expenses Table content will be injected here -->  
                    </tbody>  
                </table>  
            </div>  
        </div>  
    </div>  
</div>  

@section Scripts {  
    <script>  

        $(document).ready(function () {  
            loadIncidentalExpensesTable();  
        });  

        function loadIncidentalExpensesTable() {  
            poster.on()

            const ledgerMonth = $('#monthFilter').val();
            const ledgerYear = $('#yearFilter').val();

            $.ajax({  
                url: '@Url.Action("GetIncidentalExpensesTable", "IncidentalExpenses", new { area = "BudgetManager" })',  
                type: 'POST',
                data: { month: ledgerMonth, year: ledgerYear },
                headers: {  
                    // Include anti-forgery token for security  
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()  
                },  
                success: function(data) {
                    $('#_IncidentalExpensesTable').html(data);
                },  
                error: function (xhr, status, error) {  
                    // Log detailed error information for debugging  
                    console.error('Error:', error);  
                    console.log('Status:', status);  
                    console.log('Response:', xhr.responseText);  
                },  
                complete: function() {  
                    // Hide loading indicator regardless of success/failure  
                    poster.off();  
                }  
            });  
        }

            function updateCategoryDropdown() {
            const transactionId = $('#transactionDropdown').val();
            const categoryDropdown = $('#categoryDropdown');

            categoryDropdown.prop('disabled', true);

            $.ajax({
                url: '@Url.Action("GetCategoriesByTransaction", "IncidentalExpenses", new { area = "BudgetManager" })',
                type: 'GET',
                data: { transactionId: transactionId},
                success: function(data) {
                    categoryDropdown.empty();

                    $.each(data, function(index, category) {
                        categoryDropdown.append(
                            $('<option></option>')
                                .val(category.id)
                                .text(category.description)
                        );
                    });
                },
                error: function(xhr, status, error) {
                    console.error('Error loading categories:', error);
                    categoryDropdown.html('<option value="">Error loading categories</option>');
                },
                complete: function() {
                    categoryDropdown.prop('disabled', false);
                }
            });
        }

                function saveItem() {
            // Get form data from the dynamic row
            const formData = {
                // Example: collect values from your dynamic row inputs
                Name: $('#newName').val()?.trim() ?? '',
                Description: $('#newDescription').val()?.trim() ?? '',
                Amount: parseFloat($('#newAmount').val()) || 0,
                Date: $('#newDate').val(),
                TransactionTypeId: parseInt($('#transactionDropdown').val()) || 0,
                CategoryId: parseInt($('#categoryDropdown').val()) || 0,
                // Get selected month and year from dropdowns above the table
                Month: parseInt($('#monthFilter').val()) || 0,
                Year: parseInt($('#yearFilter').val()) || 0
            };

            // Basic validation
            // if (!formData.Name) {
            //     alert('Name is required');
            //     return;
            // }
            // if (formData.CategoryId === 0) {
            //     alert('Please select a category');
            //     return;
            // }

            poster.on("Saving");
            $.ajax({
                url: '@Url.Action("CreateIncidentalExpense", "IncidentalExpenses", new { area = "BudgetManager" })',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        // Optionally reload the table or clear the dynamic row
                        loadIncidentalExpensesTable();
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error:', error);
                    alert(xhr.responseText || 'Failed to save changes. Please try again.');
                },
                complete: function() {
                    poster.off();
                }
            });
        }

    </script>  
}
